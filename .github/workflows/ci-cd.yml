name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Build project
      run: npm run build

    - name: Run TypeScript check
      run: npm run check

    - name: Start test server
      run: |
        npm run dev &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        # Wait for server to be ready
        timeout 30 bash -c 'until curl -f http://localhost:5001/api/health; do sleep 1; done' || true

    - name: Run API tests
      run: node test-quick-validation.js

    - name: Run Playwright E2E tests
      run: npx playwright test
      env:
        BASE_URL: http://localhost:5001

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results/
          logs/
          playwright-report/

    - name: Stop test server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

  security-audit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run dependency check
      run: npx npm-check-updates --error-level 2

  deploy-staging:
    needs: [test, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example: rsync, docker push, etc.

  deploy-production:
    needs: [test, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Run production tests
      run: |
        NODE_ENV=production npm test || true

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment commands here
        # For example: rsync, docker push, PM2 reload, etc.

  notify:
    needs: [test, security-audit, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå CI/CD Pipeline failed!"
        # Add notification logic here (Slack, Discord, email, etc.)

    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ CI/CD Pipeline completed successfully!"
        # Add notification logic here
