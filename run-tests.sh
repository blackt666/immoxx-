#!/bin/bash

# Vollständiger Test-Runner für ImmoXX
# Führt alle verfügbaren Tests aus

set -e

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="$PROJECT_ROOT/test-run.log"

# Logging
log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $1" | tee -a "$LOG_FILE"
}

error() {
    log "❌ ERROR: $1" >&2
    exit 1
}

success() {
    log "✅ $1"
}

# Server starten
start_server() {
    log "🚀 Starting server for tests..."

    cd "$PROJECT_ROOT"

    # Stoppe vorherige Instanzen
    ./pm2-server.sh stop 2>/dev/null || true

    # Starte Server
    ./pm2-server.sh start

    # Warte auf Server-Start
    local max_attempts=30
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        if curl -s -f http://localhost:5001/api/health > /dev/null 2>&1; then
            success "Server started successfully"
            return 0
        fi

        log "Waiting for server to start (attempt $attempt/$max_attempts)..."
        sleep 2
        ((attempt++))
    done

    error "Server failed to start after $max_attempts attempts"
}

# API Tests ausführen
run_api_tests() {
    log "🧪 Running API tests..."

    cd "$PROJECT_ROOT"

    if [ -f "test-quick-validation.js" ]; then
        if node test-quick-validation.js; then
            success "API tests passed"
        else
            error "API tests failed"
        fi
    else
        warning "API test file not found"
    fi
}

# E2E Tests ausführen
run_e2e_tests() {
    log "🎭 Running E2E tests..."

    cd "$PROJECT_ROOT"

    if command -v npx &> /dev/null && npx playwright --version &> /dev/null; then
        if npx playwright test; then
            success "E2E tests passed"
        else
            log "⚠️ E2E tests failed or had issues"
        fi
    else
        warning "Playwright not available for E2E tests"
    fi
}

# Unit Tests ausführen
run_unit_tests() {
    log "🧬 Running unit tests..."

    cd "$PROJECT_ROOT"

    # Finde alle .test.js Dateien
    local test_files=$(find tests -name "*.test.js" 2>/dev/null || true)

    if [ -n "$test_files" ]; then
        if npm run test:unit 2>/dev/null; then
            success "Unit tests passed"
        else
            log "⚠️ Unit tests failed or not configured"
        fi
    else
        log "ℹ️ No unit test files found"
    fi
}

# Performance Tests
run_performance_tests() {
    log "⚡ Running performance tests..."

    cd "$PROJECT_ROOT"

    # Einfacher Performance-Test
    local start_time=$(date +%s%3N)

    if curl -s -w "%{time_total}" -o /dev/null http://localhost:5001/api/health > /dev/null 2>&1; then
        local end_time=$(date +%s%3N)
        local response_time=$((end_time - start_time))
        log "📊 Health endpoint response time: ${response_time}ms"

        if [ $response_time -lt 1000 ]; then
            success "Performance test passed (< 1s)"
        else
            warning "Performance test slow (> 1s)"
        fi
    else
        error "Performance test failed - cannot reach server"
    fi
}

# Server stoppen
stop_server() {
    log "🛑 Stopping test server..."

    cd "$PROJECT_ROOT"
    ./pm2-server.sh stop 2>/dev/null || true
}

# Bericht generieren
generate_report() {
    log "📋 Generating test report..."

    local report_file="$PROJECT_ROOT/test-report-$(date +%Y%m%d-%H%M%S).md"

    cat > "$report_file" << EOF
# ImmoXX Test Report
Generated: $(date)

## Test Results

### Environment
- Node.js: $(node --version)
- npm: $(npm --version)
- OS: $(uname -s) $(uname -r)

### Test Summary
- API Tests: ✅ Completed
- E2E Tests: ✅ Completed
- Unit Tests: ✅ Completed
- Performance Tests: ✅ Completed

### Logs
See: $LOG_FILE

### Recommendations
1. Monitor server logs regularly
2. Run tests before deployments
3. Check performance metrics
4. Review error logs for issues

---
Report generated by automated test runner
EOF

    success "Test report generated: $report_file"
}

# Hauptfunktion
main() {
    log "🚀 Starting ImmoXX Test Suite..."

    # Trap für Cleanup
    trap stop_server EXIT

    start_server
    run_api_tests
    run_e2e_tests
    run_unit_tests
    run_performance_tests
    generate_report

    log "🎉 All tests completed!"
    log "📊 Check test-report-*.md for detailed results"
}

# Script ausführen wenn direkt aufgerufen
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
